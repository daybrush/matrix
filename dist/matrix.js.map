{"version":3,"file":"matrix.js","sources":["../src/index.ts"],"sourcesContent":["import { average } from \"@daybrush/utils\";\n\nfunction add(\n    matrix: number[],\n    inverseMatrix: number[],\n    startIndex: number,\n    fromIndex: number,\n    n: number,\n    k: number,\n) {\n    for (let i = 0; i < n; ++i) {\n        const x = startIndex + i * n;\n        const fromX = fromIndex + i * n;\n        matrix[x] += matrix[fromX] * k;\n        inverseMatrix[x] += inverseMatrix[fromX] * k;\n    }\n}\n\nfunction swap(\n    matrix: number[],\n    inverseMatrix: number[],\n    startIndex: number,\n    fromIndex: number,\n    n: number,\n) {\n    for (let i = 0; i < n; ++i) {\n        const x = startIndex + i * n;\n        const fromX = fromIndex + i * n;\n        const v = matrix[x];\n        const iv = inverseMatrix[x];\n\n        matrix[x] = matrix[fromX];\n        matrix[fromX] = v;\n\n        inverseMatrix[x] = inverseMatrix[fromX];\n        inverseMatrix[fromX] = iv;\n    }\n}\n\nfunction divide(\n    matrix: number[],\n    inverseMatrix: number[],\n    startIndex: number,\n    n: number,\n    k: number,\n) {\n    for (let i = 0; i < n; ++i) {\n        const x = startIndex + i * n;\n\n        matrix[x] /= k;\n        inverseMatrix[x] /= k;\n    }\n}\n\n/**\n *\n * @namespace Matrix\n */\n/**\n * @memberof Matrix\n */\nexport function ignoreDimension(\n    matrix: number[],\n    m: number,\n    n: number = Math.sqrt(matrix.length),\n) {\n    const newMatrix = matrix.slice();\n\n    for (let i = 0; i < n; ++i) {\n        newMatrix[i * n + m - 1] = 0;\n        newMatrix[(m - 1) * n + i] = 0;\n    }\n    newMatrix[(m - 1) * (n + 1)] = 1;\n\n    return newMatrix;\n}\n\n/**\n * @memberof Matrix\n */\nexport function invert(\n    matrix: number[],\n    n: number = Math.sqrt(matrix.length),\n) {\n    const newMatrix = matrix.slice();\n    const inverseMatrix = createIdentityMatrix(n);\n\n    for (let i = 0; i < n; ++i) {\n        // diagonal\n        const identityIndex = n * i + i;\n\n        if (newMatrix[identityIndex] === 0) {\n            for (let j = i + 1; j < n; ++j) {\n                if (newMatrix[n * i + j]) {\n                    swap(newMatrix, inverseMatrix, i, j, n);\n                    break;\n                }\n            }\n        }\n        if (newMatrix[identityIndex]) {\n            divide(newMatrix, inverseMatrix, i, n, newMatrix[identityIndex]);\n        } else {\n            // no inverse matrix\n            return [];\n        }\n        for (let j = 0; j < n; ++j) {\n            const targetStartIndex = j;\n            const targetIndex = j + i * n;\n            const target = newMatrix[targetIndex];\n\n            if (target === 0 || i === j) {\n                continue;\n            }\n            add(newMatrix, inverseMatrix, targetStartIndex, i, n, -target);\n        }\n    }\n\n    return inverseMatrix;\n}\n\n/**\n * @memberof Matrix\n */\nexport function transpose(matrix: number[], n: number = Math.sqrt(matrix.length)) {\n    const newMatrix: number[] = [];\n\n    for (let i = 0; i < n; ++i) {\n        for (let j = 0; j < n; ++j) {\n            newMatrix[j * n + i] = matrix[n * i + j];\n        }\n    }\n    return newMatrix;\n}\n\n/**\n * @memberof Matrix\n */\nexport function getOrigin(matrix: number[], n: number = Math.sqrt(matrix.length)) {\n    const originMatrix: number[] = [];\n    const w = matrix[n * n - 1];\n    for (let i = 0; i < n - 1; ++i) {\n        originMatrix[i] = matrix[n * (n - 1) + i] / w;\n    }\n    originMatrix[n - 1] = 0;\n    return originMatrix;\n}\n\n/**\n * @memberof Matrix\n */\nexport function fromTranslation(pos: number[], n: number) {\n    const newMatrix = createIdentityMatrix(n);\n\n    for (let i = 0; i < n - 1; ++i) {\n        newMatrix[n * (n - 1) + i] = pos[i] || 0;\n    }\n    return newMatrix;\n}\n\n/**\n * @memberof Matrix\n */\nexport function convertPositionMatrix(matrix: number[], n: number) {\n    const newMatrix = matrix.slice();\n\n    for (let i = matrix.length; i < n - 1; ++i) {\n        newMatrix[i] = 0;\n    }\n    newMatrix[n - 1] = 1;\n    return newMatrix;\n}\n\n/**\n * @memberof Matrix\n */\nexport function convertDimension(matrix: number[], n: number = Math.sqrt(matrix.length), m: number) {\n    // n < m\n    if (n === m) {\n        return matrix;\n    }\n    const newMatrix = createIdentityMatrix(m);\n\n    const length = Math.min(n, m);\n    for (let i = 0; i < length - 1; ++i) {\n        for (let j = 0; j < length - 1; ++j) {\n            newMatrix[i * m + j] = matrix[i * n + j];\n        }\n\n        newMatrix[(i + 1) * m - 1] = matrix[(i + 1) * n - 1];\n        newMatrix[(m - 1) * m + i] = matrix[(n - 1) * n + i];\n    }\n    newMatrix[m * m - 1] = matrix[n * n - 1];\n\n    return newMatrix;\n}\n\n/**\n * @memberof Matrix\n */\nexport function multiplies(n: number, ...matrixes: number[][]) {\n    let m: number[] = createIdentityMatrix(n);\n\n    matrixes.forEach(matrix => {\n        m = multiply(m, matrix, n);\n    });\n    return m;\n}\n\n/**\n * @memberof Matrix\n */\nexport function multiply(matrix: number[], matrix2: number[], n: number = Math.sqrt(matrix.length)) {\n    const newMatrix: number[] = [];\n    // 1 y: n\n    // 1 x: m\n    // 2 x: m\n    // 2 y: k\n    // n * m X m * k\n    const m = matrix.length / n;\n    const k = matrix2.length / m;\n\n    if (!m) {\n        return matrix2;\n    } else if (!k) {\n        return matrix;\n    }\n    for (let i = 0; i < n; ++i) {\n        for (let j = 0; j < k; ++j) {\n            newMatrix[j * n + i] = 0;\n            for (let l = 0; l < m; ++l) {\n                // m1 x: m(l), y: n(i)\n                // m2 x: k(j):  y: m(l)\n                // nw x: n(i), y: k(j)\n                newMatrix[j * n + i] += matrix[l * n + i] * matrix2[j * m + l];\n            }\n        }\n    }\n    // n * k\n    return newMatrix;\n}\n\n/**\n * @memberof Matrix\n */\nexport function plus(pos1: number[], pos2: number[]) {\n    const length = Math.min(pos1.length, pos2.length);\n    const nextPos = pos1.slice();\n\n    for (let i = 0; i < length; ++i) {\n        nextPos[i] = nextPos[i] + pos2[i];\n    }\n    return nextPos;\n}\n\n/**\n * @memberof Matrix\n */\nexport function minus(pos1: number[], pos2: number[]) {\n    const length = Math.min(pos1.length, pos2.length);\n    const nextPos = pos1.slice();\n\n    for (let i = 0; i < length; ++i) {\n        nextPos[i] = nextPos[i] - pos2[i];\n    }\n    return nextPos;\n}\n\n/**\n * @memberof Matrix\n */\nexport function convertCSStoMatrix(a: number[], is2d: boolean = a.length === 6) {\n    if (is2d) {\n        return [\n            a[0], a[1], 0,\n            a[2], a[3], 0,\n            a[4], a[5], 1,\n        ];\n    }\n    return a;\n}\n\n/**\n * @memberof Matrix\n */\nexport function convertMatrixtoCSS(a: number[], is2d: boolean = a.length === 9) {\n    if (is2d) {\n        return [\n            a[0], a[1],\n            a[3], a[4],\n            a[6], a[7],\n        ];\n    }\n    return a;\n}\n\n/**\n * @memberof Matrix\n */\nexport function calculate(matrix: number[], matrix2: number[], n: number = matrix2.length) {\n    const result = multiply(matrix, matrix2, n);\n    const k = result[n - 1];\n    return result.map(v => v / k);\n}\n\n/**\n * @memberof Matrix\n */\nexport function rotateX3d(matrix: number[], rad: number) {\n    return multiply(\n        matrix,\n        [\n            1, 0, 0, 0,\n            0, Math.cos(rad), Math.sin(rad), 0,\n            0, -Math.sin(rad), Math.cos(rad), 0,\n            0, 0, 0, 1,\n        ],\n        4,\n    );\n}\n\n/**\n * @memberof Matrix\n */\nexport function rotateY3d(matrix: number[], rad: number) {\n    return multiply(\n        matrix,\n        [\n            Math.cos(rad), 0, -Math.sin(rad), 0,\n            0, 1, 0, 0,\n            Math.sin(rad), 0, Math.cos(rad), 0,\n            0, 0, 0, 1,\n        ],\n        4,\n    );\n}\n\n/**\n * @memberof Matrix\n */\nexport function rotateZ3d(matrix: number[], rad: number) {\n    return multiply(\n        matrix,\n        createRotateMatrix(rad, 4),\n    );\n}\n\n/**\n * @memberof Matrix\n */\nexport function scale3d(matrix: number[], [\n    sx = 1,\n    sy = 1,\n    sz = 1,\n]: number[]) {\n    return multiply(\n        matrix,\n        [\n            sx, 0, 0, 0,\n            0, sy, 0, 0,\n            0, 0, sz, 0,\n            0, 0, 0, 1,\n        ],\n        4,\n    );\n}\n\n/**\n * @memberof Matrix\n */\nexport function rotate(pos: number[], rad: number) {\n    return calculate(\n        createRotateMatrix(rad, 3),\n        convertPositionMatrix(pos, 3),\n    );\n}\n\n/**\n * @memberof Matrix\n */\nexport function translate3d(matrix, [\n    tx = 0,\n    ty = 0,\n    tz = 0,\n]: number[]) {\n    return multiply(\n        matrix,\n        [\n            1, 0, 0, 0,\n            0, 1, 0, 0,\n            0, 0, 1, 0,\n            tx, ty, tz, 1,\n        ],\n        4,\n    );\n}\n/**\n * @memberof Matrix\n */\nexport function matrix3d(matrix1: number[], matrix2: number[]) {\n    return multiply(matrix1, matrix2, 4);\n}\n\n/**\n * @memberof Matrix\n */\nexport function createRotateMatrix(rad: number, n: number) {\n    const cos = Math.cos(rad);\n    const sin = Math.sin(rad);\n    const m = createIdentityMatrix(n);\n\n    // cos -sin\n    // sin cos\n    m[0] = cos;\n    m[1] = sin;\n    m[n] = -sin;\n    m[n + 1] = cos;\n\n    return m;\n}\n\n/**\n * @memberof Matrix\n */\nexport function createIdentityMatrix(n: number) {\n    const length = n * n;\n    const matrix: number[] = [];\n\n    for (let i = 0; i < length; ++i) {\n        matrix[i] = i % (n + 1) ? 0 : 1;\n    }\n    return matrix;\n}\n\n/**\n * @memberof Matrix\n */\nexport function createScaleMatrix(scale: number[], n: number) {\n    const m = createIdentityMatrix(n);\n    const length = Math.min(scale.length, n - 1);\n\n    for (let i = 0; i < length; ++i) {\n        m[(n + 1) * i] = scale[i];\n    }\n    return m;\n}\n\n/**\n * @memberof Matrix\n */\nexport function createOriginMatrix(origin: number[], n: number) {\n    const m = createIdentityMatrix(n);\n    const length = Math.min(origin.length, n - 1);\n\n    for (let i = 0; i < length; ++i) {\n        m[n * (n - 1) + i] = origin[i];\n    }\n    return m;\n}\n\n/**\n * @memberof Matrix\n */\nexport function createWarpMatrix(\n    pos0: number[],\n    pos1: number[],\n    pos2: number[],\n    pos3: number[],\n    nextPos0: number[],\n    nextPos1: number[],\n    nextPos2: number[],\n    nextPos3: number[],\n) {\n    const [x0, y0] = pos0;\n    const [x1, y1] = pos1;\n    const [x2, y2] = pos2;\n    const [x3, y3] = pos3;\n\n    const [u0, v0] = nextPos0;\n    const [u1, v1] = nextPos1;\n    const [u2, v2] = nextPos2;\n    const [u3, v3] = nextPos3;\n\n    const matrix = [\n        x0, 0, x1, 0, x2, 0, x3, 0,\n        y0, 0, y1, 0, y2, 0, y3, 0,\n        1, 0, 1, 0, 1, 0, 1, 0,\n        0, x0, 0, x1, 0, x2, 0, x3,\n        0, y0, 0, y1, 0, y2, 0, y3,\n        0, 1, 0, 1, 0, 1, 0, 1,\n        -u0 * x0, -v0 * x0, -u1 * x1, -v1 * x1, -u2 * x2, -v2 * x2, -u3 * x3, -v3 * x3,\n        -u0 * y0, -v0 * y0, -u1 * y1, -v1 * y1, -u2 * y2, -v2 * y2, -u3 * y3, -v3 * y3,\n    ];\n    const inverseMatrix = invert(matrix, 8);\n\n    if (!inverseMatrix.length) {\n        return [];\n    }\n    const h = multiply(inverseMatrix, [u0, v0, u1, v1, u2, v2, u3, v3], 8);\n\n    h[8] = 1;\n    return convertDimension(transpose(h), 3, 4);\n}\n\n/**\n * @memberof Matrix\n */\nexport function getCenter(points: number[][]) {\n    return [0, 1].map(i => average(points.map(pos => pos[i])));\n}\n"],"names":["add","matrix","inverseMatrix","startIndex","fromIndex","n","k","i","x","fromX","swap","v","iv","divide","ignoreDimension","m","Math","sqrt","length","newMatrix","slice","invert","createIdentityMatrix","identityIndex","j","targetStartIndex","targetIndex","target","transpose","getOrigin","originMatrix","w","fromTranslation","pos","convertPositionMatrix","convertDimension","min","multiplies","_i","matrixes","forEach","multiply","matrix2","l","plus","pos1","pos2","nextPos","minus","convertCSStoMatrix","a","is2d","convertMatrixtoCSS","calculate","result","map","rotateX3d","rad","cos","sin","rotateY3d","rotateZ3d","createRotateMatrix","scale3d","_a","_b","sx","_c","sy","_d","sz","rotate","translate3d","tx","ty","tz","matrix3d","matrix1","createScaleMatrix","scale","createOriginMatrix","origin","createWarpMatrix","pos0","pos3","nextPos0","nextPos1","nextPos2","nextPos3","x0","y0","x1","y1","x2","y2","x3","y3","u0","v0","u1","v1","u2","v2","u3","v3","h","getCenter","points","average"],"mappings":"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"}