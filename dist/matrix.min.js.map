{"version":3,"file":"matrix.min.js","sources":["../src/index.ts"],"sourcesContent":["import { average } from \"@daybrush/utils\";\n\nfunction add(\n    matrix: number[],\n    inverseMatrix: number[],\n    startIndex: number,\n    fromIndex: number,\n    n: number,\n    k: number,\n) {\n    for (let i = 0; i < n; ++i) {\n        const x = startIndex + i * n;\n        const fromX = fromIndex + i * n;\n        matrix[x] += matrix[fromX] * k;\n        inverseMatrix[x] += inverseMatrix[fromX] * k;\n    }\n}\n\nfunction swap(\n    matrix: number[],\n    inverseMatrix: number[],\n    startIndex: number,\n    fromIndex: number,\n    n: number,\n) {\n    for (let i = 0; i < n; ++i) {\n        const x = startIndex + i * n;\n        const fromX = fromIndex + i * n;\n        const v = matrix[x];\n        const iv = inverseMatrix[x];\n\n        matrix[x] = matrix[fromX];\n        matrix[fromX] = v;\n\n        inverseMatrix[x] = inverseMatrix[fromX];\n        inverseMatrix[fromX] = iv;\n    }\n}\n\nfunction divide(\n    matrix: number[],\n    inverseMatrix: number[],\n    startIndex: number,\n    n: number,\n    k: number,\n) {\n    for (let i = 0; i < n; ++i) {\n        const x = startIndex + i * n;\n\n        matrix[x] /= k;\n        inverseMatrix[x] /= k;\n    }\n}\n\n/**\n *\n * @namespace Matrix\n */\n/**\n * @memberof Matrix\n */\nexport function ignoreDimension(\n    matrix: number[],\n    m: number,\n    n: number = Math.sqrt(matrix.length),\n) {\n    const newMatrix = matrix.slice();\n\n    for (let i = 0; i < n; ++i) {\n        newMatrix[i * n + m - 1] = 0;\n        newMatrix[(m - 1) * n + i] = 0;\n    }\n    newMatrix[(m - 1) * (n + 1)] = 1;\n\n    return newMatrix;\n}\n\n/**\n * @memberof Matrix\n */\nexport function invert(\n    matrix: number[],\n    n: number = Math.sqrt(matrix.length),\n) {\n    const newMatrix = matrix.slice();\n    const inverseMatrix = createIdentityMatrix(n);\n\n    for (let i = 0; i < n; ++i) {\n        // diagonal\n        const identityIndex = n * i + i;\n\n        if (newMatrix[identityIndex] === 0) {\n            for (let j = i + 1; j < n; ++j) {\n                if (newMatrix[n * i + j]) {\n                    swap(newMatrix, inverseMatrix, i, j, n);\n                    break;\n                }\n            }\n        }\n        if (newMatrix[identityIndex]) {\n            divide(newMatrix, inverseMatrix, i, n, newMatrix[identityIndex]);\n        } else {\n            // no inverse matrix\n            return [];\n        }\n        for (let j = 0; j < n; ++j) {\n            const targetStartIndex = j;\n            const targetIndex = j + i * n;\n            const target = newMatrix[targetIndex];\n\n            if (target === 0 || i === j) {\n                continue;\n            }\n            add(newMatrix, inverseMatrix, targetStartIndex, i, n, -target);\n        }\n    }\n\n    return inverseMatrix;\n}\n\n/**\n * @memberof Matrix\n */\nexport function transpose(matrix: number[], n: number = Math.sqrt(matrix.length)) {\n    const newMatrix: number[] = [];\n\n    for (let i = 0; i < n; ++i) {\n        for (let j = 0; j < n; ++j) {\n            newMatrix[j * n + i] = matrix[n * i + j];\n        }\n    }\n    return newMatrix;\n}\n\n/**\n * @memberof Matrix\n */\nexport function getOrigin(matrix: number[], n: number = Math.sqrt(matrix.length)) {\n    const originMatrix: number[] = [];\n    const w = matrix[n * n - 1];\n    for (let i = 0; i < n - 1; ++i) {\n        originMatrix[i] = matrix[n * (n - 1) + i] / w;\n    }\n    originMatrix[n - 1] = 0;\n    return originMatrix;\n}\n\n/**\n * @memberof Matrix\n */\nexport function fromTranslation(pos: number[], n: number) {\n    const newMatrix = createIdentityMatrix(n);\n\n    for (let i = 0; i < n - 1; ++i) {\n        newMatrix[n * (n - 1) + i] = pos[i] || 0;\n    }\n    return newMatrix;\n}\n\n/**\n * @memberof Matrix\n */\nexport function convertPositionMatrix(matrix: number[], n: number) {\n    const newMatrix = matrix.slice();\n\n    for (let i = matrix.length; i < n - 1; ++i) {\n        newMatrix[i] = 0;\n    }\n    newMatrix[n - 1] = 1;\n    return newMatrix;\n}\n\n/**\n * @memberof Matrix\n */\nexport function convertDimension(matrix: number[], n: number = Math.sqrt(matrix.length), m: number) {\n    // n < m\n    if (n === m) {\n        return matrix;\n    }\n    const newMatrix = createIdentityMatrix(m);\n\n    const length = Math.min(n, m);\n    for (let i = 0; i < length - 1; ++i) {\n        for (let j = 0; j < length - 1; ++j) {\n            newMatrix[i * m + j] = matrix[i * n + j];\n        }\n\n        newMatrix[(i + 1) * m - 1] = matrix[(i + 1) * n - 1];\n        newMatrix[(m - 1) * m + i] = matrix[(n - 1) * n + i];\n    }\n    newMatrix[m * m - 1] = matrix[n * n - 1];\n\n    return newMatrix;\n}\n\n/**\n * @memberof Matrix\n */\nexport function multiplies(n: number, ...matrixes: number[][]) {\n    let m: number[] = createIdentityMatrix(n);\n\n    matrixes.forEach(matrix => {\n        m = multiply(m, matrix, n);\n    });\n    return m;\n}\n\n/**\n * @memberof Matrix\n */\nexport function multiply(matrix: number[], matrix2: number[], n: number = Math.sqrt(matrix.length)) {\n    const newMatrix: number[] = [];\n    // 1 y: n\n    // 1 x: m\n    // 2 x: m\n    // 2 y: k\n    // n * m X m * k\n    const m = matrix.length / n;\n    const k = matrix2.length / m;\n\n    if (!m) {\n        return matrix2;\n    } else if (!k) {\n        return matrix;\n    }\n    for (let i = 0; i < n; ++i) {\n        for (let j = 0; j < k; ++j) {\n            newMatrix[j * n + i] = 0;\n            for (let l = 0; l < m; ++l) {\n                // m1 x: m(l), y: n(i)\n                // m2 x: k(j):  y: m(l)\n                // nw x: n(i), y: k(j)\n                newMatrix[j * n + i] += matrix[l * n + i] * matrix2[j * m + l];\n            }\n        }\n    }\n    // n * k\n    return newMatrix;\n}\n\n/**\n * @memberof Matrix\n */\nexport function plus(pos1: number[], pos2: number[]) {\n    const length = Math.min(pos1.length, pos2.length);\n    const nextPos = pos1.slice();\n\n    for (let i = 0; i < length; ++i) {\n        nextPos[i] = nextPos[i] + pos2[i];\n    }\n    return nextPos;\n}\n\n/**\n * @memberof Matrix\n */\nexport function minus(pos1: number[], pos2: number[]) {\n    const length = Math.min(pos1.length, pos2.length);\n    const nextPos = pos1.slice();\n\n    for (let i = 0; i < length; ++i) {\n        nextPos[i] = nextPos[i] - pos2[i];\n    }\n    return nextPos;\n}\n\n/**\n * @memberof Matrix\n */\nexport function convertCSStoMatrix(a: number[], is2d: boolean = a.length === 6) {\n    if (is2d) {\n        return [\n            a[0], a[1], 0,\n            a[2], a[3], 0,\n            a[4], a[5], 1,\n        ];\n    }\n    return a;\n}\n\n/**\n * @memberof Matrix\n */\nexport function convertMatrixtoCSS(a: number[], is2d: boolean = a.length === 9) {\n    if (is2d) {\n        return [\n            a[0], a[1],\n            a[3], a[4],\n            a[6], a[7],\n        ];\n    }\n    return a;\n}\n\n/**\n * @memberof Matrix\n */\nexport function calculate(matrix: number[], matrix2: number[], n: number = matrix2.length) {\n    const result = multiply(matrix, matrix2, n);\n    const k = result[n - 1];\n    return result.map(v => v / k);\n}\n\n/**\n * @memberof Matrix\n */\nexport function rotateX3d(matrix: number[], rad: number) {\n    return multiply(\n        matrix,\n        [\n            1, 0, 0, 0,\n            0, Math.cos(rad), Math.sin(rad), 0,\n            0, -Math.sin(rad), Math.cos(rad), 0,\n            0, 0, 0, 1,\n        ],\n        4,\n    );\n}\n\n/**\n * @memberof Matrix\n */\nexport function rotateY3d(matrix: number[], rad: number) {\n    return multiply(\n        matrix,\n        [\n            Math.cos(rad), 0, -Math.sin(rad), 0,\n            0, 1, 0, 0,\n            Math.sin(rad), 0, Math.cos(rad), 0,\n            0, 0, 0, 1,\n        ],\n        4,\n    );\n}\n\n/**\n * @memberof Matrix\n */\nexport function rotateZ3d(matrix: number[], rad: number) {\n    return multiply(\n        matrix,\n        createRotateMatrix(rad, 4),\n    );\n}\n\n/**\n * @memberof Matrix\n */\nexport function scale3d(matrix: number[], [\n    sx = 1,\n    sy = 1,\n    sz = 1,\n]: number[]) {\n    return multiply(\n        matrix,\n        [\n            sx, 0, 0, 0,\n            0, sy, 0, 0,\n            0, 0, sz, 0,\n            0, 0, 0, 1,\n        ],\n        4,\n    );\n}\n\n/**\n * @memberof Matrix\n */\nexport function rotate(pos: number[], rad: number) {\n    return calculate(\n        createRotateMatrix(rad, 3),\n        convertPositionMatrix(pos, 3),\n    );\n}\n\n/**\n * @memberof Matrix\n */\nexport function translate3d(matrix, [\n    tx = 0,\n    ty = 0,\n    tz = 0,\n]: number[]) {\n    return multiply(\n        matrix,\n        [\n            1, 0, 0, 0,\n            0, 1, 0, 0,\n            0, 0, 1, 0,\n            tx, ty, tz, 1,\n        ],\n        4,\n    );\n}\n/**\n * @memberof Matrix\n */\nexport function matrix3d(matrix1: number[], matrix2: number[]) {\n    return multiply(matrix1, matrix2, 4);\n}\n\n/**\n * @memberof Matrix\n */\nexport function createRotateMatrix(rad: number, n: number) {\n    const cos = Math.cos(rad);\n    const sin = Math.sin(rad);\n    const m = createIdentityMatrix(n);\n\n    // cos -sin\n    // sin cos\n    m[0] = cos;\n    m[1] = sin;\n    m[n] = -sin;\n    m[n + 1] = cos;\n\n    return m;\n}\n\n/**\n * @memberof Matrix\n */\nexport function createIdentityMatrix(n: number) {\n    const length = n * n;\n    const matrix: number[] = [];\n\n    for (let i = 0; i < length; ++i) {\n        matrix[i] = i % (n + 1) ? 0 : 1;\n    }\n    return matrix;\n}\n\n/**\n * @memberof Matrix\n */\nexport function createScaleMatrix(scale: number[], n: number) {\n    const m = createIdentityMatrix(n);\n    const length = Math.min(scale.length, n - 1);\n\n    for (let i = 0; i < length; ++i) {\n        m[(n + 1) * i] = scale[i];\n    }\n    return m;\n}\n\n/**\n * @memberof Matrix\n */\nexport function createOriginMatrix(origin: number[], n: number) {\n    const m = createIdentityMatrix(n);\n    const length = Math.min(origin.length, n - 1);\n\n    for (let i = 0; i < length; ++i) {\n        m[n * (n - 1) + i] = origin[i];\n    }\n    return m;\n}\n\n/**\n * @memberof Matrix\n */\nexport function createWarpMatrix(\n    pos0: number[],\n    pos1: number[],\n    pos2: number[],\n    pos3: number[],\n    nextPos0: number[],\n    nextPos1: number[],\n    nextPos2: number[],\n    nextPos3: number[],\n) {\n    const [x0, y0] = pos0;\n    const [x1, y1] = pos1;\n    const [x2, y2] = pos2;\n    const [x3, y3] = pos3;\n\n    const [u0, v0] = nextPos0;\n    const [u1, v1] = nextPos1;\n    const [u2, v2] = nextPos2;\n    const [u3, v3] = nextPos3;\n\n    const matrix = [\n        x0, 0, x1, 0, x2, 0, x3, 0,\n        y0, 0, y1, 0, y2, 0, y3, 0,\n        1, 0, 1, 0, 1, 0, 1, 0,\n        0, x0, 0, x1, 0, x2, 0, x3,\n        0, y0, 0, y1, 0, y2, 0, y3,\n        0, 1, 0, 1, 0, 1, 0, 1,\n        -u0 * x0, -v0 * x0, -u1 * x1, -v1 * x1, -u2 * x2, -v2 * x2, -u3 * x3, -v3 * x3,\n        -u0 * y0, -v0 * y0, -u1 * y1, -v1 * y1, -u2 * y2, -v2 * y2, -u3 * y3, -v3 * y3,\n    ];\n    const inverseMatrix = invert(matrix, 8);\n\n    if (!inverseMatrix.length) {\n        return [];\n    }\n    const h = multiply(inverseMatrix, [u0, v0, u1, v1, u2, v2, u3, v3], 8);\n\n    h[8] = 1;\n    return convertDimension(transpose(h), 3, 4);\n}\n\n/**\n * @memberof Matrix\n */\nexport function getCenter(points: number[][]) {\n    return [0, 1].map(i => average(points.map(pos => pos[i])));\n}\n"],"names":["invert","matrix","n","Math","sqrt","length","newMatrix","slice","inverseMatrix","createIdentityMatrix","i","identityIndex","j","startIndex","fromIndex","x","fromX","v","iv","swap","k","divide","target","add","transpose","convertPositionMatrix","convertDimension","m","min","multiply","matrix2","l","calculate","result","map","createRotateMatrix","rad","cos","sin","a","is2d","origin","scale","pos0","pos1","pos2","pos3","nextPos0","nextPos1","nextPos2","nextPos3","x0","y0","x1","y1","x2","y2","x3","y3","u0","v0","u1","v1","u2","v2","u3","v3","h","pos","points","average","originMatrix","w","matrix1","nextPos","_i","matrixes","forEach","_a","sx","_b","sy","_c","_d","tx","ty"],"mappings":"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"}